{{ if .Values.api.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    flightctl.service: flightctl-api
  name: flightctl-api
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      flightctl.service: flightctl-api
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        flightctl.service: flightctl-api
    spec:
      serviceAccountName: flightctl-api
      {{- if .Values.certManager.enabled }}
      initContainers:
        - name: wait-for-certificates
          image: busybox:latest
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for CA certificate to be ready..."
              while [ ! -f /root/.flightctl/certs/ca.crt ] || [ ! -f /root/.flightctl/certs/ca.key ]; do
                echo "CA certificate files not ready yet, waiting..."
                sleep 2
              done
              
              echo "Waiting for API certificate to be ready..."
              while [ ! -f /root/.flightctl/certs/server.crt ] || [ ! -f /root/.flightctl/certs/server.key ]; do
                echo "API certificate files not ready yet, waiting..."
                sleep 2
              done
              
              echo "All certificates are ready!"
          volumeMounts:
            - mountPath: /root/.flightctl/certs/ca.crt
              name: flightctl-ca-secret
              subPath: tls.crt
              readOnly: true
            - mountPath: /root/.flightctl/certs/ca.key
              name: flightctl-ca-secret
              subPath: tls.key
              readOnly: true
            - mountPath: /root/.flightctl/certs/server.crt
              name: flightctl-api-tls
              subPath: tls.crt
              readOnly: true
            - mountPath: /root/.flightctl/certs/server.key
              name: flightctl-api-tls
              subPath: tls.key
              readOnly: true
      {{- end }}
      containers:
        - name: flightctl-api
          image: {{ .Values.api.image.image }}:{{ default .Chart.AppVersion .Values.api.image.tag }}
          imagePullPolicy: {{ default .Values.global.imagePullPolicy .Values.api.image.pullPolicy }}
          env:
            - name: HOME
              value: "/root"
            - name: KV_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: flightctl-kv-secret
                  key: password
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: flightctl-db-secret
                  key: masterPassword
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: flightctl-db-secret
                  key: masterUser
            {{- if eq .Values.global.auth.type "none" }}
            - name: FLIGHTCTL_DISABLE_AUTH
              value: "true"
            {{- end }}
            {{- if .Values.api.env }}
            {{- range $key, $value := .Values.api.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
          ports:
            - containerPort: 3443
              name: service-api
              protocol: TCP
            - containerPort: 7443
              name: agent-api
              protocol: TCP
            - containerPort: 15690
              name: api-prom-target
              protocol: TCP
            - containerPort: 15691
              name: db-prom-target
              protocol: TCP

          volumeMounts:
            {{- if .Values.certManager.enabled }}
            # Use cert-manager certificates
            - mountPath: /root/.flightctl/certs/ca.crt
              name: flightctl-ca-secret
              subPath: tls.crt
              readOnly: true
            - mountPath: /root/.flightctl/certs/ca.key
              name: flightctl-ca-secret
              subPath: tls.key
              readOnly: true
            - mountPath: /root/.flightctl/certs/server.crt
              name: flightctl-api-tls
              subPath: tls.crt
              readOnly: true
            - mountPath: /root/.flightctl/certs/server.key
              name: flightctl-api-tls
              subPath: tls.key
              readOnly: true
            {{- else }}
            # Use persistent volume for certificates (legacy)
            - mountPath: /root/.flightctl/
              name: flightctl-api-certs
            {{- end }}
            - mountPath: /root/.flightctl/config.yaml
              name: flightctl-api-config
              subPath: config.yaml
              readOnly: true
            {{- if .Values.global.auth.k8s.externalApiToken}}
            - mountPath: /var/flightctl/k8s
              name: flightctl-api-k8s-token
              readOnly: true
            {{- end}}

      restartPolicy: Always
      volumes:
        {{- if .Values.certManager.enabled }}
        # cert-manager certificate secrets
        - name: flightctl-ca-secret
          secret:
            secretName: flightctl-ca-secret
        - name: flightctl-api-tls
          secret:
            secretName: flightctl-api-tls
        {{- else }}
        # Legacy persistent volume for certificates
        - name: flightctl-api-certs
          persistentVolumeClaim:
            claimName: flightctl-api-certs
        {{- end }}
        - name: flightctl-api-config
          configMap:
            name: flightctl-api-config
        {{- if .Values.global.auth.k8s.externalApiToken}}
        - name: flightctl-api-k8s-token
          secret:
            secretName: flightctl-api-k8s-token
        {{- end}}
{{ end }}
