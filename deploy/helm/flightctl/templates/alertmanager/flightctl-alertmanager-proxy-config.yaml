{{- if .Values.alertmanagerProxy.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: flightctl-alertmanager-proxy-config
  namespace: {{ .Release.Namespace }}
data:
  config.yaml: |-
    database:
      hostname: {{ include "flightctl.dbHostname" . }}
      type: {{ required "Values.db.type is required" $.Values.db.type | quote }}
      port: {{ required "Values.db.port is required" $.Values.db.port }}
      name: {{ required "Values.db.name is required" $.Values.db.name }}
      {{- if .Values.db.sslmode }}
      sslmode: {{ .Values.db.sslmode | quote }}
      {{- end }}
      {{- if .Values.db.sslcert }}
      sslcert: {{ .Values.db.sslcert | quote }}
      {{- end }}
      {{- if .Values.db.sslkey }}
      sslkey: {{ .Values.db.sslkey | quote }}
      {{- end }}
      {{- if .Values.db.sslrootcert }}
      sslrootcert: {{ .Values.db.sslrootcert | quote }}
      {{- end }}
    service:
      certStore: "/app/certs"
      {{ if and .Values.api.rateLimit (not (empty .Values.api.rateLimit)) }}
      rateLimit:
          requests: {{ .Values.api.rateLimit.requests }}
          window: {{ .Values.api.rateLimit.window }}
          authRequests: {{ .Values.api.rateLimit.authRequests }}
          authWindow: {{ .Values.api.rateLimit.authWindow }}
          {{- if .Values.api.rateLimit.trustedProxies }}
          trustedProxies:
          {{- range .Values.api.rateLimit.trustedProxies }}
              - {{ . | quote }}
          {{- end }}
          {{- end }}
      {{ end }}
    ca:
      internalConfig:
        certStore: "/tmp/ca-certs"
    {{- if not (eq .Values.global.auth.type "none") }}
    auth:
      insecureSkipTlsVerify: {{ default false .Values.global.auth.insecureSkipTlsVerify }}
      {{- if and .Values.global.auth .Values.global.auth.caCert }}
      caCert: {{ .Values.global.auth.caCert }}
      {{- end }}
      {{- if or (eq .Values.global.target "acm") (eq .Values.global.auth.type "k8s") }}
      k8s:
        apiUrl: {{ .Values.global.auth.k8s.apiUrl }}
        externalOpenShiftApiUrl: {{ include "flightctl.getOpenShiftAPIUrl" . }}
        rbacNs: {{ default .Release.Namespace .Values.global.auth.k8s.rbacNs }}
      {{- else if eq .Values.global.auth.type "aap" }}
      aap:
        apiUrl: {{ .Values.global.auth.aap.apiUrl }}
        externalApiUrl: {{ .Values.global.auth.aap.externalApiUrl }}
      {{- else }}
      oidc:
        clientId: {{ .Values.global.auth.oidc.clientId }}
        {{- if .Values.global.auth.oidc.enabled }}
        enabled: {{ .Values.global.auth.oidc.enabled }}
        {{- end }}
        issuer: {{ .Values.global.auth.oidc.issuer }}
        externalOidcAuthority: {{ include "flightctl.getOidcAuthorityUrl" . }}
        {{- if .Values.global.auth.oidc.organizationAssignment }}
        organizationAssignment: {{ .Values.global.auth.oidc.organizationAssignment | toYaml | nindent 8 }}
        {{- end }}
        {{- if .Values.global.auth.oidc.usernameClaim }}
        usernameClaim: {{ .Values.global.auth.oidc.usernameClaim }}
        {{- end }}
        {{- if .Values.global.auth.oidc.roleClaim }}
        roleClaim: {{ .Values.global.auth.oidc.roleClaim }}
        {{- end }}
      {{- end }}
    {{- end }}
    organizations:
      enabled: {{ .Values.global.organizations.enabled }}
    {{ if .Values.global.tracing.enabled }}
    tracing:
        enabled: true
        endpoint: {{ .Values.global.tracing.endpoint }}
        insecure: {{ .Values.global.tracing.insecure }}
    {{ end }}
{{- end }}

