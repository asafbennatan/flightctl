// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"H6Gb0fzB2sDf39z/vwAAAP//VlxQwQ6nAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
